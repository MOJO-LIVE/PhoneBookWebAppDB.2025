@page
@model AddContactModel
@{
    ViewData["Title"] = "Добавить абонента";
}

<style>
    body {
        font-family: Arial, sans-serif;
        background-color: #f4f7fa;
        color: #333;
        margin: 0;
        padding: 20px;
    }

    h2 {
        color: #2a9d8f;
        text-align: center;
        margin-bottom: 30px;
    }

    .form-container {
        display: flex;
        justify-content: center;
        gap: 30px;
    }

    form {
        display: flex;
        flex-direction: column;
        gap: 15px;
        width: 280px;
        background-color: #fff;
        padding: 20px;
        border-radius: 10px;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
    }

    .form-group {
        display: flex;
        flex-direction: column;
        gap: 5px;
    }

    label {
        font-size: 0.95rem;
        color: #555;
    }

    input {
        padding: 8px 12px;
        border-radius: 5px;
        border: 1px solid #ddd;
        font-size: 0.95rem;
    }

        input:focus {
            border-color: #2a9d8f;
            outline: none;
            box-shadow: 0 0 0 2px rgba(42, 157, 143, 0.2);
        }

    button {
        padding: 10px;
        background-color: #2a9d8f;
        color: white;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        font-size: 0.95rem;
        margin-top: 10px;
    }

        button:hover {
            background-color: #1e7a64;
        }

    .back-button {
        display: block;
        text-align: center;
        margin: 20px auto 0;
        color: #2a9d8f;
        text-decoration: none;
    }

        .back-button:hover {
            text-decoration: underline;
        }

    .message {
        text-align: center;
        margin-top: 20px;
    }

    .success {
        color: green;
    }

    .validation-error {
        color: #e74c3c;
        font-size: 0.85rem;
        margin-top: 3px;
        display: none;
    }

    .input-error {
        border-color: #e74c3c !important;
    }

    .error-message {
        color: #e74c3c;
        text-align: center;
        margin-top: 15px;
        padding: 10px;
        background-color: #fdecea;
        border-radius: 5px;
        display: none;
    }
</style>

<h2>Добавить нового абонента</h2>

<div class="form-container">
    <form method="post" id="contactForm">
        <div class="form-group">
            <label for="Contact_Name">Имя:</label>
            <input asp-for="Contact.Name" placeholder="Введите имя" id="nameInput" />
            <span class="validation-error" id="nameError">Пожалуйста, введите имя</span>
        </div>
        <div class="form-group">
            <label for="Contact_Phone">Телефон:</label>
            <input asp-for="Contact.Phone" id="phone" placeholder="+7-XXX-XXX-XX-XX" />
            <span class="validation-error" id="phoneError">Пожалуйста, введите телефон</span>
        </div>
        <div class="form-group">
            <label for="Contact_Category">Категория:</label>
            <input asp-for="Contact.Category" placeholder="Введите категорию" id="categoryInput" />
            <span class="validation-error" id="categoryError">Пожалуйста, введите категорию</span>
        </div>
        <button type="submit">Добавить</button>
    </form>
</div>

<div class="error-message" id="generalError"></div>

<a asp-page="/Welcome" class="back-button">← Назад</a>

@if (!string.IsNullOrEmpty(Model.Message))
{
    <div class="message @(Model.Message.Contains("успешно") ? "success" : "error")">
        @Model.Message
    </div>
}

<script>
    // Форматирование телефона (остаётся без изменений)
    function formatPhoneNumber(input) {
        let value = input.value.replace(/\D/g, '');
        if (value.length <= 1) {
            input.value = `+${value}`;
        } else if (value.length <= 4) {
            input.value = `+${value[0]}-${value.slice(1)}`;
        } else if (value.length <= 7) {
            input.value = `+${value[0]}-${value.slice(1, 4)}-${value.slice(4)}`;
        } else if (value.length <= 9) {
            input.value = `+${value[0]}-${value.slice(1, 4)}-${value.slice(4, 7)}-${value.slice(7)}`;
        } else {
            input.value = `+${value[0]}-${value.slice(1, 4)}-${value.slice(4, 7)}-${value.slice(7, 9)}-${value.slice(9, 11)}`;
        }
    }

    document.getElementById('phone').addEventListener('input', function (e) {
        formatPhoneNumber(e.target);
    });

    // Улучшенная валидация
    document.getElementById('contactForm').addEventListener('submit', function(e) {
        let isValid = true;
        const generalError = document.getElementById('generalError');
        generalError.style.display = 'none';

        // Проверка каждого поля
        const fields = [
            { input: 'nameInput', error: 'nameError' },
            { input: 'phone', error: 'phoneError' },
            { input: 'categoryInput', error: 'categoryError' }
        ];

        fields.forEach(field => {
            const inputElement = document.getElementById(field.input);
            const errorElement = document.getElementById(field.error);

            if (!inputElement.value.trim()) {
                inputElement.classList.add('input-error');
                errorElement.style.display = 'block';
                isValid = false;
            } else {
                inputElement.classList.remove('input-error');
                errorElement.style.display = 'none';
            }
        });

        if (!isValid) {
            e.preventDefault();
            generalError.textContent = 'Пожалуйста, заполните все обязательные поля';
            generalError.style.display = 'block';
            window.scrollTo({
                top: 0,
                behavior: 'smooth'
            });
        }
    });

    // Убираем ошибку при начале ввода
    document.querySelectorAll('input').forEach(input => {
        input.addEventListener('input', function() {
            if (this.value.trim()) {
                this.classList.remove('input-error');
                document.getElementById(this.id + 'Error').style.display = 'none';
            }
        });
    });
</script>